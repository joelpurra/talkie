{
  "name": "@talkie/shared-locales",
  "version": "0.0.0",
  "author": {
    "email": "code+github@joelpurra.com",
    "name": "Joel Purra",
    "url": "https://joelpurra.com/"
  },
  "dependencies": {
    "@talkie/shared-interfaces": "*",
    "@talkie/translator-tool": "*"
  },
  "exports": {
    "./*": {
      "types": "./dist/esm/*",
      "import": "./dist/esm/*"
    }
  },
  "homepage": "https://joelpurra.com/projects/talkie/",
  "license": "GPL-3.0",
  "private": true,
  "scripts": {
    "build": "npm run --silent build:typescript",
    "build:typescript": "tsc --build tsconfig.json",
    "clean": "rimraf ./dist",
    "languages:generate": "npm run --silent languages:generate:extracted && npm run --silent languages:generate:languages",
    "languages:generate:extracted": "mkdirp ./dist/data/languages && jq --slurp --sort-keys 'map({ (.extensionLocale.message): { direction: .extensionLocaleBidiDirection.message, sample: .frontend_voicesSampleText.message } }) | add' $(find ./dist/data/_locales/ -name 'messages.json' | sort) > ./dist/data/languages/extracted.json~ && mv ./dist/data/languages/extracted.json~ ./dist/data/languages/extracted.json",
    "languages:generate:languages": "jq --slurp --sort-keys '{ base: .[0], languages: .[1] } + .[3]' ./src/data/languages/base.json ./dist/data/languages/extracted.json ./src/data/languages/overrides.json > ./dist/data/languages/languages.json~ && mv ./dist/data/languages/languages.json~ ./dist/data/languages/languages.json",
    "messages:count": "for MESSAGESJSON in $(find ./dist/data/_locales/ -name 'messages.json' | sort); do jq 'to_entries | .[].key' \"$MESSAGESJSON\"; done | sort | uniq -c | sort -n -r",
    "messages:download": "npm run --silent messages:sort && webext-translator './src/data' en base.json automatic.json && npm run --silent messages:sort",
    "messages:generate": "npm run --silent messages:sort && ./src/translation-merge.sh && npm run --silent messages:sort && npm run --silent messages:override:generate && npm run --silent messages:override:outdated",
    "messages:override:generate": "for OVERRIDEJSONMANUALJSON in $(find ./src/data/_locales/ \\( -name 'override.json' -or -name 'manual.json' \\) | sort); do jq --slurp --sort-keys '.[0] as $en | .[1] | with_entries(.key as $key | .value |= (.original = $en[$key].message) + if $en[$key].description then { description: $en[$key].description } else {} end + if $en[$key].placeholders then { placeholders: $en[$key].placeholders } else {} end)' ./dist/data/_locales/en/messages.json \"$OVERRIDEJSONMANUALJSON\" > \"${OVERRIDEJSONMANUALJSON}~\"; mv \"${OVERRIDEJSONMANUALJSON}~\" \"$OVERRIDEJSONMANUALJSON\"; done",
    "messages:override:outdated": "find ./src/data/_locales -type f -iname 'override.json' | sort | while read P; do O=\"${P%.json}.outdated.json\"  && jq --sort-keys --slurpfile outdated \"$O\" '($outdated[0] // {}) + with_entries(select(.value.original != .value[\"translated-from\"]))' \"$P\" > \"${O}~\"  && mv \"${O}~\" \"$O\"  && jq 'with_entries(select(.value.original == .value[\"translated-from\"]))' \"$P\" > \"${P}~\"  && mv \"${P}~\" \"$P\"; done",
    "messages:prune": "find ./src/data/_locales -type f -iname 'override.json' -or -iname 'automatic.json' | sort | while read P; do jq --argjson messageNames \"$(jq --compact-output 'to_entries | map(.key)' ./src/data/_locales/en/base.json)\" 'with_entries(select(.key as $key | $messageNames | indices($key) | length == 1))' \"$P\" > \"${P}~\" && mv \"${P}~\" \"$P\"; done",
    "messages:sort": "for JSON in $(find ./src/data/_locales/ -name '*.json' | sort); do jq --sort-keys '.' \"$JSON\" > \"${JSON}~\"; mv \"${JSON}~\" \"$JSON\"; done",
    "messages:translate": "npm run --silent messages:download && npm run --silent messages:generate && npm run --silent messages:count",
    "reconstruct": "npm run --silent reconstruct:messages && npm run --silent reconstruct:languages",
    "reconstruct:languages": "npm run --silent languages:generate",
    "reconstruct:messages": "npm run --silent messages:generate && npm run --silent messages:prune",
    "watch": "npm run --silent build:typescript -- --watch"
  },
  "type": "module",
  "typesVersions": {
    "^4": {
      "*": [
        "src/*"
      ]
    }
  }
}
